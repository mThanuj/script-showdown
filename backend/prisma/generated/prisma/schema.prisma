// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlayerStatus {
  ONLINE
  OFFLINE
  PLAYING
}

enum RatingReason {
  MATCH_WIN
  MATCH_LOSS
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum NotificationType {
  MATCH_FOUND
  MATCH_INVITATION
  ELO_CHANGE
  RANK_UP
}

enum MatchInviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id         String @id @default(uuid())
  email      String @unique
  first_name String
  last_name  String
  avatar_url String

  PlayerProfile    PlayerProfile[]
  RatingHistory    RatingHistory[]
  matchesAsPlayer1 Match[]            @relation(name: "Player1")
  matchesAsPlayer2 Match[]            @relation(name: "Player2")
  matchesAsWinner  Match[]            @relation(name: "Winner")
  Notification     Notification[]
  sentInvites      MatchInvite[]      @relation(name: "sender")
  receivedInvites  MatchInvite[]      @relation(name: "receiver")
  ExecutionHistory ExecutionHistory[]
  ChatMessage      ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerProfile {
  id      String       @id @default(uuid())
  user_id String
  rank    Int
  rating  Int
  region  String
  status  PlayerStatus @default(OFFLINE)

  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RatingHistory {
  id         String       @id @default(uuid())
  user_id    String
  old_rating Int
  new_rating Int
  reason     RatingReason

  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id         String      @id @default(uuid())
  player1_id String
  player2_id String
  winner_id  String
  status     MatchStatus @default(PENDING)

  player1          User               @relation(name: "Player1", fields: [player1_id], references: [id])
  player2          User               @relation(name: "Player2", fields: [player2_id], references: [id])
  winner           User               @relation(name: "Winner", fields: [winner_id], references: [id])
  MatchInvite      MatchInvite[]
  ExecutionHistory ExecutionHistory[]
  ChatMessage      ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String           @id @default(uuid())
  receiver_id String
  type        NotificationType
  message     String
  read        Boolean          @default(false)

  receiver User @relation(fields: [receiver_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchInvite {
  id          String            @id @default(uuid())
  match_id    String
  sender_id   String
  receiver_id String
  status      MatchInviteStatus @default(PENDING)

  match    Match @relation(fields: [match_id], references: [id])
  sender   User  @relation(name: "sender", fields: [sender_id], references: [id])
  receiver User  @relation(name: "receiver", fields: [receiver_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExecutionHistory {
  id       String @id @default(uuid())
  user_id  String
  match_id String
  code     String
  output   String

  user  User  @relation(fields: [user_id], references: [id])
  match Match @relation(fields: [match_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String @id @default(uuid())
  match_id  String
  sender_id String
  message   String

  match  Match @relation(fields: [match_id], references: [id])
  sender User  @relation(fields: [sender_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
