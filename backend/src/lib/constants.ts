export const languageSnippets = {
  assembly: `section .data\n\tmsg db "Hello, World!", 0Ah\n\tlen equ $ - msg\n\nsection .text\n\tglobal _start\n_start:\n\tmov edx, len\n\tmov ecx, msg\n\tmov ebx, 1\n\tmov eax, 4\n\tint 0x80\n\tmov eax, 1\n\tint 0x80`,
  bash: `echo "Hello, World!"`,
  basic: `PRINT "Hello, World!"`,
  c: `#include <stdio.h>\nint main() {\n\tprintf("Hello, World!\\n");\n\treturn 0;\n}`,
  'c++': `#include <iostream>\nusing namespace std;\nint main() {\n\tcout << "Hello, World!" << endl;\n\treturn 0;\n}`,
  clojure: `(println "Hello, World!")`,
  cobol: `IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\nDISPLAY "Hello, World!".\nSTOP RUN.`,
  commonlisp: `(format t "Hello, World!~%")`,
  'c#': `using System;\nclass Program {\n\tstatic void Main() {\n\t\tConsole.WriteLine("Hello, World!");\n\t}\n}`,
  dart: `void main() {\n\tprint('Hello, World!');\n}`,
  d: `import std.stdio;\nvoid main() {\n\twriteln("Hello, World!");\n}`,
  elixir: `IO.puts "Hello, World!"`,
  erlang: `-module(hello).\n-export([start/0]).\nstart() -> io:format("Hello, World!~n").`,
  executable: `// No source code for executable`,
  'f#': `printfn "Hello, World!"`,
  fortran: `program hello\n\tprint *, "Hello, World!"\nend program hello`,
  go: `package main\nimport "fmt"\nfunc main() {\n\tfmt.Println("Hello, World!")\n}`,
  groovy: `println "Hello, World!"`,
  haskell: `main = putStrLn "Hello, World!"`,
  javafx: `public class HelloFX {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println("Hello, World!");\n\t}\n}`,
  java: `public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println("Hello, World!");\n\t}\n}`,
  javascript: `console.log("Hello, World!");`,
  kotlin: `fun main() {\n\tprintln("Hello, World!")\n}`,
  lua: `print("Hello, World!")`,
  'multi-file': `// main.c\n#include <stdio.h>\nint main() {\n\tprintf("Hello, World!\\n");\n\treturn 0;\n}`,
  'objective-c': `#import <stdio.h>\nint main() {\n\tprintf("Hello, World!\\n");\n\treturn 0;\n}`,
  ocaml: `print_endline "Hello, World!";;`,
  octave: `disp("Hello, World!")`,
  pascal: `program Hello;\nbegin\n\tWriteLn('Hello, World!');\nend.`,
  perl: `print "Hello, World!\\n";`,
  php: `<?php\necho "Hello, World!";\n?>`,
  plaintext: `Hello, World!`,
  prolog: `:- initialization(main).\nmain :- write('Hello, World!'), nl.`,
  python: `print("Hello, World!")`,
  r: `cat("Hello, World!\\n")`,
  ruby: `puts "Hello, World!"`,
  rust: `fn main() {\n\tprintln!("Hello, World!");\n}`,
  scala: `object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t\tprintln("Hello, World!")\n\t}\n}`,
  sql: `SELECT "Hello, World!";`,
  swift: `print("Hello, World!")`,
  typescript: `console.log("Hello, World!");`,
  visual: `Module Module1\n\tSub Main()\n\t\tConsole.WriteLine("Hello, World!")\n\tEnd Sub\nEnd Module`,
};
